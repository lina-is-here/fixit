#!.contest_venv/bin/python
import sys

from consolemenu import *
from consolemenu.format import *
from consolemenu.items import *
import ruamel.yaml


def yamls():
    yaml = ruamel.yaml.YAML() 
    yaml.indent(sequence=4, offset=2)
    input_file="./tasks_definition.yaml"
    with open(input_file, 'r') as f:
        data = f.read()
    x = yaml.load(data)
    return x


def use_hint(deduction, hint):
    with open('volume/score', 'r+') as f:
        score = f.read()
        new_score = int(score) - deduction
        f.seek(0)
        f.write(str(new_score))
        f.truncate()
        Screen.println(hint)
        Screen().input('So, your current score is {}'.format(new_score))


def main():
    data = yamls()
    # Change some menu formatting
    task_menu_format = MenuFormatBuilder()\
        .set_title_align('center')\
        .set_subtitle_align('center')\
        .set_border_style_type(MenuBorderStyleType.DOUBLE_LINE_BORDER)\
        .show_prologue_top_border(True)\
        .show_prologue_bottom_border(True)

    menu_format = MenuFormatBuilder().set_border_style_type(MenuBorderStyleType.HEAVY_BORDER) \
        .set_prompt("SELECT>") \
        .set_title_align('center') \
        .set_subtitle_align('center') \
        .set_left_margin(4) \
        .set_right_margin(4) \
        .show_header_bottom_border(True)

    # menu = ConsoleMenu("Root Menu", "This is the Root Menu Subtitle", formatter=menu_format)
    menu = ConsoleMenu("Menu", "Fixit game",
                               prologue_text="Welcome to the story! You need to fix a lot of stuff today...  \n Let's begin?",
                               epilogue_text="Good luck",
                               formatter=task_menu_format)

    # just split the window
    normal_start = CommandItem("Start",
                                  'sh -c \'tmux split-window  "bash --rcfile files/.bashrc_normal"\'')

    # description of the first (container) menu item
    container_task_description = ConsoleMenu(data['task1']['name'],
                                             prologue_text=data['task1']['description'],
                                             epilogue_text="Good luck with containers.",
                                             formatter=task_menu_format)

    container_hint1_points = data['task1']['hints']['hint1']['points']
    container_hint1_description = data['task1']['hints']['hint1']['description']
    container_task_hint1 = FunctionItem("Hint 1", lambda: use_hint(container_hint1_points, container_hint1_description))
    container_task_description.append_item(normal_start)
    container_task_description.append_item(container_task_hint1)

    container_task = SubmenuItem("Docker task", submenu=container_task_description)

    # description of the second task (connect to the deployed container)
    connect_task_description = ConsoleMenu(data['task2']['name'],
                                           prologue_text=data['task2']['description'],
                                           epilogue_text="Good luck with containers.",
                                           formatter=task_menu_format)

    connect_hint1_points = data['task2']['hints']['hint1']['points']
    connect_hint1_description = data['task2']['hints']['hint1']['description']
    connect_task_hint1 = FunctionItem("Hint 1", lambda: use_hint(connect_hint1_points,
                                                                   connect_hint1_description))
    connect_task_description.append_item(normal_start)
    connect_task_description.append_item(connect_task_hint1)

    connect_task = SubmenuItem("Connect to the container task", submenu=connect_task_description)

    # description of the third task (download the task)
    get_task_description = ConsoleMenu(data['task3']['name'],
                                             prologue_text=data['task3']['description'],
                                             epilogue_text="Good luck with this.",
                                             formatter=task_menu_format)

    # get_task_hint1_points = data['task2']['hints']['hint1']['points']
    # get_task_hint1_description = data['task2']['hints']['hint1']['description']
    # get_task_hint1 = FunctionItem("Hint 1", lambda: use_hint(connect_hint1_points,
    #                                                                connect_hint1_description))
    get_task_description.append_item(normal_start)
    # get_task_description.append_item(connect_task_hint1)

    get_task = SubmenuItem("Get the task", submenu=get_task_description)

    # Create a menu item that calls a function
    function_item = FunctionItem("Fun item", Screen().input, kwargs={"prompt": "Enter an input: "})

    # Create a menu item that calls a system command
    command_item = CommandItem("Run game", 'sh -c \'tmux split-window  "bash --rcfile files/.bashrc_task5"\'')

    # Create a submenu using a Selection Menu, which takes a list of strings to create the menu items. This
    # submenu is passed the same formatter object, to keep its formatting consistent.
    submenu = SelectionMenu(["item1", "item2", "item3"], title="Selection Menu",
                            subtitle="These menu items return to the previous menu",
                            formatter=menu_format)
    # Create the menu item that opens the Selection submenu
    submenu_item = SubmenuItem("Submenu item", submenu=submenu)
    submenu_item.set_menu(menu)

    # Create a different formatter for another submenu, so it has a different look
    submenu_formatter = MenuFormatBuilder().set_border_style_type(MenuBorderStyleType.ASCII_BORDER)

    # Create a second submenu, but this time use a standard ConsoleMenu instance, and use the submenu_formatter.
    submenu_2 = ConsoleMenu("Another Submenu Title", "Submenu subtitle. Notice this menu is ASCII.",
                            formatter=submenu_formatter)
    # function_item_2 = FunctionItem("Fun item", Screen().input, ["Enter an input: "])

    function_item_2 = FunctionItem("TESTTTT", yamls)

    item2 = MenuItem("Another Item")
    submenu_2.append_item(function_item_2)
    submenu_2.append_item(item2)
    # Menu item for opening submenu 2
    submenu_item_2 = SubmenuItem("Another submenu", submenu=submenu_2)
    submenu_item_2.set_menu(menu)

    # Create a third submenu which uses double-line border
    submenu_3 = ConsoleMenu("Third Submenu", "This Time with Double-Line Borders.",
                            prologue_text="This is my prologue. I am currently showing my top and bottom borders, but \
they are hidden by default. Also notice that my text is really long, so it extends beyond a single line, and should \
wrap properly within the menu borders. This is a useful place to put instructions to the user about how to use \
the menu.",
                            epilogue_text="This is my epilogue. My borders are currently hidden.",
                            formatter=MenuFormatBuilder()
                            .set_title_align('center')
                            .set_subtitle_align('center')
                            .set_border_style_type(MenuBorderStyleType.DOUBLE_LINE_BORDER)
                            .show_prologue_top_border(True)
                            .show_prologue_bottom_border(True))
    submenu_3.append_item(function_item_2)
    submenu_3.append_item(MenuItem("Third Item. Does Nothing."))
    # Menu item for opening submenu 3
    submenu_item_3 = SubmenuItem("Third Submenu", submenu=submenu_3)
    submenu_item_3.set_menu(menu)

    # Add all the items to the root menu
    menu.append_item(container_task)
    menu.append_item(connect_task)
    menu.append_item(get_task)
    menu.append_item(function_item)
    menu.append_item(command_item)
    menu.append_item(submenu_item)
    menu.append_item(submenu_item_2)
    menu.append_item(submenu_item_3)

    # Show the menu
    menu.start()
    menu.join()


if __name__ == "__main__":
    main()

