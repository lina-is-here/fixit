#!.contest_venv/bin/python
import datetime
import os
import sys

from consolemenu import *
from consolemenu.format import *
from consolemenu.items import *
import ruamel.yaml
from slugify import slugify

# global definition of the score file for the player
filename = 'tmp'


def yamls():
    yaml = ruamel.yaml.YAML()
    yaml.indent(sequence=4, offset=2)
    input_file = "./tasks_definition.yaml"
    filename1 = os.path.join(os.path.dirname(sys.executable), input_file)
    with open(filename1, 'r') as f:
        data = f.read()
    x = yaml.load(data)
    return x


def use_hint(deduction, hint):
    global filename
    if os.path.isfile(filename):
        filename2 = os.path.join(os.path.dirname(sys.executable), filename)
        with open(filename2, 'r+') as f:
            score = f.read()
            new_score = int(score) - deduction
            f.seek(0)
            f.write(str(new_score))
            f.truncate()
            Screen.println(hint)
            Screen().input('So, your current score is {}'.format(new_score))
    else:
        Screen().input('Please provide your name and email first')


def get_name_email():
    data = yamls()
    username_input = Screen().input(prompt="Enter your name: ")
    email_input = Screen().input(prompt="Enter your email: ")

    username = slugify(username_input.input_string)
    email = email_input.input_string
    current_time = datetime.datetime.now().time()
    global filename
    filename = '/home/contest/fixit/volume/{}_{}_{}'.format(username, email, current_time)
    total_points = str(data['total_points'])
    filename3 = os.path.join(os.path.dirname(sys.executable), filename)
    with open(filename3, 'w') as f:
        f.write(total_points)


def get_current_score():
    global filename
    if os.path.isfile(filename):
        filename4 = os.path.join(os.path.dirname(sys.executable), filename)
        with open(filename4) as f:
            score = f.read()
        Screen().input('Your score is {}'.format(score))
    else:
        Screen().input('Please provide your name and email first')


def main():
    data = yamls()
    # Menu formatting
    task_menu_format = MenuFormatBuilder() \
        .set_title_align('center') \
        .set_subtitle_align('center') \
        .set_border_style_type(MenuBorderStyleType.DOUBLE_LINE_BORDER) \
        .show_prologue_top_border(True) \
        .show_prologue_bottom_border(True)

    menu = ConsoleMenu("Menu", "Fixit game",
                       prologue_text=data['main_description'],
                       epilogue_text="Good luck!",
                       formatter=task_menu_format)

    # just split the window
    normal_start = CommandItem("Open a terminal window below",
                               'sh -c \'tmux split-window  "bash --rcfile files/.bashrc_normal"\'')

    # introduction
    intro = ConsoleMenu(data['task0']['name'],
                        prologue_text=data['task0']['description'],
                        epilogue_text=data['exit'],
                        formatter=task_menu_format)

    intro_name = FunctionItem(data['task0']['inputs']['name'], get_name_email)

    intro.append_item(intro_name)

    intro_task = SubmenuItem(data['task0']['name'], submenu=intro)

    # description of the first (container) menu item
    container_task_description = ConsoleMenu(data['task1']['name'],
                                             prologue_text=data['task1']['description'],
                                             epilogue_text=data['exit'],
                                             formatter=task_menu_format)

    container_hint1_points = data['task1']['hints']['hint1']['points']
    container_hint1_description = data['task1']['hints']['hint1']['description']
    container_task_hint1 = FunctionItem(
        "Hint 1, the cost is {} points".format(container_hint1_points),
        lambda: use_hint(container_hint1_points,
                         container_hint1_description))
    container_task_description.append_item(normal_start)
    container_task_description.append_item(container_task_hint1)

    container_task = SubmenuItem(data['task1']['name'], submenu=container_task_description)

    # description of the second task (connect to the deployed container)
    connect_task_description = ConsoleMenu(data['task2']['name'],
                                           prologue_text=data['task2']['description'],
                                           epilogue_text=data['exit'],
                                           formatter=task_menu_format)

    connect_hint1_points = data['task2']['hints']['hint1']['points']
    connect_hint1_description = data['task2']['hints']['hint1']['description']
    connect_task_hint1 = FunctionItem("Hint 1, the cost is {} points".format(connect_hint1_points),
                                      lambda: use_hint(connect_hint1_points,
                                                       connect_hint1_description))
    connect_task_description.append_item(normal_start)
    connect_task_description.append_item(connect_task_hint1)

    connect_task = SubmenuItem(data['task2']['name'], submenu=connect_task_description)

    # description of the third task (download the task)
    get_task_description = ConsoleMenu(data['task3']['name'],
                                       prologue_text=data['task3']['description'],
                                       epilogue_text=data['exit'],
                                       formatter=task_menu_format)

    # hint 1
    get_task_hint1_points = data['task3']['hints']['hint1']['points']
    get_task_hint1_description = data['task3']['hints']['hint1']['description']
    get_task_hint1 = FunctionItem("Hint 1, the cost is {} points".format(get_task_hint1_points),
                                  lambda: use_hint(get_task_hint1_points,
                                                   get_task_hint1_description))
    # hint 2
    get_task_hint2_points = data['task3']['hints']['hint2']['points']
    get_task_hint2_description = data['task3']['hints']['hint2']['description']
    get_task_hint2 = FunctionItem("Hint 2, the cost is {} points".format(get_task_hint2_points),
                                  lambda: use_hint(get_task_hint2_points,
                                                   get_task_hint2_description))
    # hint 3
    get_task_hint3_points = data['task3']['hints']['hint3']['points']
    get_task_hint3_description = data['task3']['hints']['hint3']['description']
    get_task_hint3 = FunctionItem("Hint 3, the cost is {} points".format(get_task_hint3_points),
                                  lambda: use_hint(get_task_hint3_points,
                                                   get_task_hint3_description))
    get_task_description.append_item(normal_start)
    get_task_description.append_item(get_task_hint1)
    get_task_description.append_item(get_task_hint2)
    get_task_description.append_item(get_task_hint3)

    get_task = SubmenuItem(data['task3']['name'], submenu=get_task_description)

    # description of the fourth task (unpack the archive)
    unpack_archive_description = ConsoleMenu(data['task4']['name'],
                                             prologue_text=data['task4']['description'],
                                             epilogue_text=data['exit'],
                                             formatter=task_menu_format)

    # hint 1
    unpack_archive_hint1_points = data['task4']['hints']['hint1']['points']
    unpack_archive_hint1_description = data['task4']['hints']['hint1']['description']
    unpack_archive_hint1 = FunctionItem(
        "Hint 1, the cost is {} points".format(unpack_archive_hint1_points),
        lambda: use_hint(unpack_archive_hint1_points,
                         unpack_archive_hint1_description))
    # hint 2
    unpack_archive_hint2_points = data['task4']['hints']['hint2']['points']
    unpack_archive_hint2_description = data['task4']['hints']['hint2']['description']
    unpack_archive_hint2 = FunctionItem(
        "Hint 2, the cost is {} points".format(unpack_archive_hint2_points),
        lambda: use_hint(unpack_archive_hint2_points,
                         unpack_archive_hint2_description))
    # hint 3
    unpack_archive_hint3_points = data['task4']['hints']['hint3']['points']
    unpack_archive_hint3_description = data['task4']['hints']['hint3']['description']
    unpack_archive_hint3 = FunctionItem(
        "Hint 3, the cost is {} points".format(unpack_archive_hint3_points),
        lambda: use_hint(unpack_archive_hint3_points,
                         unpack_archive_hint3_description))
    unpack_archive_description.append_item(normal_start)
    unpack_archive_description.append_item(unpack_archive_hint1)
    unpack_archive_description.append_item(unpack_archive_hint2)
    unpack_archive_description.append_item(unpack_archive_hint3)

    unpack_archive = SubmenuItem(data['task4']['name'], submenu=unpack_archive_description)

    # description of the fifth task (running tests)
    run_the_tests_description = ConsoleMenu(data['task5']['name'],
                                            prologue_text=data['task5']['description'],
                                            epilogue_text=data['exit'],
                                            formatter=task_menu_format)

    # hint 1
    run_the_tests_hint1_points = data['task5']['hints']['hint1']['points']
    run_the_tests_hint1_description = data['task5']['hints']['hint1']['description']
    run_the_tests_hint1 = FunctionItem(
        "Hint 1, the cost is {} points".format(run_the_tests_hint1_points),
        lambda: use_hint(run_the_tests_hint1_points,
                         run_the_tests_hint1_description))
    # hint 2
    run_the_tests_hint2_points = data['task5']['hints']['hint2']['points']
    run_the_tests_hint2_description = data['task5']['hints']['hint2']['description']
    run_the_tests_hint2 = FunctionItem(
        "Hint 2, the cost is {} points".format(run_the_tests_hint2_points),
        lambda: use_hint(run_the_tests_hint2_points,
                         run_the_tests_hint2_description))
    # hint 3
    run_the_tests_hint3_points = data['task5']['hints']['hint3']['points']
    run_the_tests_hint3_description = data['task5']['hints']['hint3']['description']
    run_the_tests_hint3 = FunctionItem(
        "Hint 3, the cost is {} points".format(run_the_tests_hint3_points),
        lambda: use_hint(run_the_tests_hint3_points,
                         run_the_tests_hint3_description))
    # hint 4
    run_the_tests_hint4_points = data['task5']['hints']['hint4']['points']
    run_the_tests_hint4_description = data['task5']['hints']['hint4']['description']
    run_the_tests_hint4 = FunctionItem(
        "Hint 4, the cost is {} points".format(run_the_tests_hint4_points),
        lambda: use_hint(run_the_tests_hint4_points,
                         run_the_tests_hint4_description))
    run_the_tests_description.append_item(normal_start)
    run_the_tests_description.append_item(run_the_tests_hint1)
    run_the_tests_description.append_item(run_the_tests_hint2)
    run_the_tests_description.append_item(run_the_tests_hint3)
    run_the_tests_description.append_item(run_the_tests_hint4)

    run_the_tests = SubmenuItem(data['task5']['name'], submenu=run_the_tests_description)

    # get your score
    current_score = FunctionItem("Your score", get_current_score)

    # Root menu
    menu.append_item(intro_task)
    menu.append_item(container_task)
    menu.append_item(connect_task)
    menu.append_item(get_task)
    menu.append_item(unpack_archive)
    menu.append_item(run_the_tests)
    menu.append_item(current_score)

    # Show the menu
    menu.start()
    menu.join()


if __name__ == "__main__":
    main()
